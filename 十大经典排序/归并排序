归并排序（Merge Sort）是一种基于分治法的高效排序算法，由约翰·冯·诺伊曼于1945年提出。它的核心思想是将数组分成两半，分别排序后再合并。

### 算法步骤
1. **分解**：将数组从中间分成两个子数组。
2. **递归排序**：对每个子数组递归调用归并排序。
3. **合并**：将两个有序子数组合并成一个有序数组。

### 合并过程
1. 创建两个指针，分别指向两个子数组的起始位置。
2. 比较指针所指元素，将较小的元素放入结果数组，并移动相应指针。
3. 重复上述步骤，直到某个子数组被完全合并。
4. 将剩余子数组的元素直接复制到结果数组。

### 时间复杂度
- **最优**：\(O(n \log n)\)
- **最差**：\(O(n \log n)\)
- **平均**：\(O(n \log n)\)

### 空间复杂度
- 需要额外的 \(O(n)\) 空间存储合并后的数组。

### 稳定性
- 归并排序是稳定的，相同元素的相对顺序不会改变。

代码：
def merge_sort(arr):
    if len(arr) > 1:
        # 找到中间点，将数组分成两部分
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        # 递归地对左右两部分进行排序
        merge_sort(left_half)
        merge_sort(right_half)

        # 合并两个有序的子数组
        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        # 检查是否有剩余的元素
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1
