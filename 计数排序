计数排序
计数排序（Counting Sort）是一种非比较型的排序算法，适用于对整数或有限范围内的数据进行排序。它的核心思想是通过统计每个元素的出现次数，然后根据统计结果将元素放回正确的位置。由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序中的算法来排序数据范围很大的数组
算法步骤
1. 遍历数组，找出其中的最大数字，记为 m ，然后创建一个长度为 m+1 的辅助数组 counter 。
2. 借助 counter 统计 nums 中各数字的出现次数，其中 counter[num] 对应数字 num 的出现次数。统计方法很简单，只需遍历 nums（设当前数字为 num），每轮将 counter[num] 增加 1 即可。
3. 由于 counter 的各个索引天然有序，因此相当于所有数字已经排序好了。接下来，我们遍历 counter ，根据各数字出现次数从小到大的顺序填入 nums 即可。

1. 统计频率：
  ○ 初始化计数数组 count，大小为 9（范围 0-8）。
  ○ 遍历列表，统计每个元素的出现次数：
    ■ count[1] = 1
    ■ count[2] = 2
    ■ count[3] = 2
    ■ count[4] = 1
    ■ count[8] = 1
  ○ 计数数组：[0, 1, 2, 2, 1, 0, 0, 0, 1]。
2. 累加频率：
  ○ 将计数数组中的值累加，得到每个元素的最终位置：
    ■ count[1] = 1
    ■ count[2] = 1 + 2 = 3■count[2] = 1 2 = 3
    ■ count[3] = 3 + 2 = 5■count[3] = 3 2 = 5
    ■ count[4] = 5 + 1 = 6■count[4] = 5 1 = 6
    ■ count[8] = 6 + 1 = 7■count[8] = 6 1 = 7
  ○ 累加后的计数数组：[0, 1, 3, 5, 6, 6, 6, 6, 7]。
3. 放置元素：
  ○ 初始化结果数组 output，大小为 7。
  ○ 遍历原始列表，根据计数数组中的位置信息，将元素放入结果数组：
    ■ 元素 4：count[4] = 6，放入 output[5]，count[4] -= 1。
    ■ 元素 2：count[2] = 3，放入 output[2]，count[2] -= 1。
    ■ 元素 2：count[2] = 2，放入 output[1]，count[2] -= 1。
    ■ 元素 8：count[8] = 7，放入 output[6]，count[8] -= 1。
    ■ 元素 3：count[3] = 5，放入 output[4]，count[3] -= 1。
    ■ 元素 3：count[3] = 4，放入 output[3]，count[3] -= 1。
    ■ 元素 1：count[1] = 1，放入 output[0]，count[1] -= 1。
  ○ 结果数组：[1, 2, 2, 3, 3, 4, 8]。
4. 输出结果：
  ○ 排序后的列表：[1, 2, 2, 3, 3, 4, 8]。

void countingSortNaive(int nums[], int size) {
    // 1. 统计数组最大元素 m
    int m = 0;   Int m = 0；
    for (int i = 0; i < size; i++) {For (int I = 0；I < size；I) {For (int I = 0；I < size；i) {For (int i = 0; i < size; i) {
        if (nums[i] > m) {如果（nums[i] > m） {
            m = nums[i];
        }
    }
    // 2. 统计各数字的出现次数
    // counter[num] 代表 num 的出现次数
    int *counter = calloc(m + 1, sizeof(int));Int *counter = calloc(m 1, sizeof(Int))；
    for (int i = 0; i < size; i++) {For (int I = 0；I < size；I) {For (int I = 0；I < size；i) {For (int i = 0; i < size; i) {
        counter[nums[i]]++;   场外nums [i]];
    }
    // 3. 遍历 counter ，将各元素填入原数组 nums
    int i = 0;   Int I = 0；
    for (int num = 0; num < m + 1; num++) {for (int num = 0; num < m   1; num  ) {
        for (int j = 0; j < counter[num]; j++, i++) {For (int j = 0；J < counter[num]；J， I) {
            nums[i] = num;
        }
    }
    // 4. 释放内存
    free(counter);   免费(柜台);
}

如果输入数据是对象，上述步骤 3. 就失效了。假设输入数据是商品对象，我们想按照商品价格（类的成员变量）对商品进行排序，而上述算法只能给出价格的排序结果。
那么如何才能得到原数据的排序结果呢？我们首先计算 counter 的“前缀和”。顾名思义，索引 i 处的前缀和 prefix[i] 等于数组前 i 个元素之和：
prefix[i]=∑j=0icounter[j]前缀[我]=∑j = 0 icounter [j]
前缀和具有明确的意义，prefix[num] - 1 代表元素 num 在结果数组 res 中最后一次出现的索引。这个信息非常关键，因为它告诉我们各个元素应该出现在结果数组的哪个位置。接下来，我们倒序遍历原数组 nums 的每个元素 num ，在每轮迭代中执行以下两步。
1. 将 num 填入数组 res 的索引 prefix[num] - 1 处。
2. 令前缀和 prefix[num] 减小 1 ，从而得到下次放置 num 的索引。
遍历完成后，数组 res 中就是排序好的结果，最后使用 res 覆盖原数组 nums 即可

/* 计数排序 */
// 完整实现，可排序对象，并且是稳定排序
void countingSort(int nums[], int size) {
    // 1. 统计数组最大元素 m
    int m = 0;   Int m = 0；
    for (int i = 0; i < size; i++) {For (int I = 0；I < size；I) {For (int I = 0；I < size；i) {For (int i = 0; i < size; i) {
        if (nums[i] > m) {如果（nums[i] > m） {
            m = nums[i];
        }
    }
    // 2. 统计各数字的出现次数
    // counter[num] 代表 num 的出现次数
    int *counter = calloc(m, sizeof(int));Int *counter = calloc(m, sizeof(Int))；
    for (int i = 0; i < size; i++) {For (int I = 0；I < size；I) {For (int I = 0；I < size；i) {For (int i = 0; i < size; i) {
        counter[nums[i]]++;   场外nums [i]];
    }
    // 3. 求 counter 的前缀和，将“出现次数”转换为“尾索引”
    // 即 counter[num]-1 是 num 在 res 中最后一次出现的索引
    for (int i = 0; i < m; i++) {For (int I = 0；I < m；I) {
        counter[i + 1] += counter[i];Counter [i 1] = Counter [i]；
    }
    // 4. 倒序遍历 nums ，将各元素填入结果数组 res
    // 初始化数组 res 用于记录结果
    int *res = malloc(sizeof(int) * size);
    for (int i = size - 1; i >= 0; i--) {
        int num = nums[i];
        res[counter[num] - 1] = num; // 将 num 放置到对应索引处
        counter[num]--;              // 令前缀和自减 1 ，得到下次放置 num 的索引
    }
    // 使用结果数组 res 覆盖原数组 nums
    memcpy(nums, res, size * sizeof(int));
    // 5. 释放内存
    free(res);
    free(counter);   免费(柜台);
}

● 时间复杂度为 O(n+m)、非自适应排序 ：涉及遍历 nums 和遍历 counter ，都使用线性时间。一般情况下 n≫m ，时间复杂度趋于 O(n) 。
● 空间复杂度为 O(n+m)、非原地排序：借助了长度分别为 n 和 m 的数组 res 和 counter 
局限性
● 计数排序只适用于非负整数
● 计数排序适用于数据量大但数据范围较小的情况
