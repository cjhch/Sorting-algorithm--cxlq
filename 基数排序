 基数排序的基本思想

1. **按位分配**：
   - 将待排序的整数按照某一位（如个位、十位、百位等）的值分配到不同的“桶”中。
   - 例如，按个位排序时，数字 123 会被分配到“3”号桶，数字 456 会被分配到“6”号桶。

2. **逐位排序**：
   - 从最低位（个位）开始，依次对每一位进行分配和排序。
   - 每次排序后，将桶中的元素按顺序重新组合成一个新的数组。

3. **重复操作**：
   - 重复上述过程，直到所有位数都被处理完毕。

4. **最终结果**：
   - 当所有位数都排序完成后，数组中的元素就是有序的。

基数排序（Radix Sort）是一种非比较型的整数排序算法，它通过将整数按位数切割成不同的数字，然后按每个位数分别进行排序。基数排序的核心思想是“按位分配，逐位排序”，通常从最低位（个位）开始，逐步向高位（十位、百位等）进行排序。

基数排序的时间复杂度为 **O(nk)**，其中：
- **n** 是待排序元素的数量，
- **k** 是数字的最大位数。

基数排序适用于排序整数或固定长度的字符串，且在处理大量数据时表现良好。

---

import numpy as np

def radix_sort(arr):
    # 找到数组中的最大值，确定最大位数
    max_num = max(arr)
    exp = 1
    while max_num // exp > 0:
        counting_sort(arr, exp)
        exp *= 10

def counting_sort(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10

    # 统计每个数字出现的次数
    for i in range(n):
        index = (arr[i] // exp) % 10
        count[index] += 1

    # 计算累加次数
    for i in range(1, 10):
        count[i] += count[i - 1]

    # 根据计数数组构建输出数组
    i = n - 1
    while i >= 0:
        index = (arr[i] // exp) % 10
        output[count[index] - 1] = arr[i]
        count[index] -= 1
        i -= 1

    # 将排序后的结果复制回原数组
    for i in range(n):
        arr[i] = output[i]

# 示例
arr = [170, 45, 75, 90, 802, 24, 2, 66]
radix_sort(arr)
print("排序后的数组:", arr)
