
快速排序
快速排序（Quick Sort）是由东尼·霍尔所发展的一种排序算法,是一种高效的排序算法，基于分治法（Divide and Conquer）的思想。它的核心是通过选择一个基准元素（pivot），将列表分为两部分：一部分小于基准元素，另一部分大于基准元素，然后递归地对这两部分进行排序。也就是“哨兵划分”。
算法步骤：
1. 选择基准元素：从列表中选择一个元素作为基准（pivot）。选择方式可以是第一个元素、最后一个元素、中间元素或随机元素。
2. 分区：将列表重新排列，使得所有小于基准元素的元素都在基准的左侧，所有大于基准元素的元素都在基准的右侧。基准元素的位置在分区完成后确定。
3. 递归排序：对基准元素左侧和右侧的子列表分别递归地进行快速排序。
4. 合并：由于分区操作是原地进行的，递归结束后整个列表已经有序。

假设有一个待排序的列表 [3, 6, 8, 10, 1, 2, 1]，选择最后一个元素作为基准（pivot），排序过程如下：
1. 初始状态：
  ○ 列表：[3, 6, 8, 10, 1, 2, 1]。
  ○ 基准元素：1（最后一个元素）。
2. 第一轮分区：
  ○ 将小于基准的元素放在左侧，大于基准的元素放在右侧。
  ○ 分区后列表：[1, 1, 2, 10, 6, 8, 3]。
  ○ 基准元素 1 的位置确定。
3. 递归排序：
  ○ 对左侧子列表 [1] 和右侧子列表 [2, 10, 6, 8, 3] 分别进行快速排序。
  ○ 左侧子列表已经有序。
  ○ 对右侧子列表 [2, 10, 6, 8, 3] 选择基准元素 3（最后一个元素）：
    ■ 分区后列表：[2, 3, 6, 8, 10]。
    ■ 基准元素 3 的位置确定。
  ○ 继续递归排序右侧子列表 [6, 8, 10]：
    ■ 选择基准元素 10（最后一个元素）：
      ● 分区后列表：[6, 8, 10]。
      ● 基准元素 10 的位置确定。
    ■ 继续递归排序左侧子列表 [6, 8]：
      ● 选择基准元素 8（最后一个元素）：
        ○ 分区后列表：[6, 8]。
        ○ 基准元素 8 的位置确定。
      ● 继续递归排序左侧子列表 [6]，已经有序。
4. 最终结果：
  ○ 列表完全有序：[1, 1, 2, 3, 6, 8, 10]

主要代码：
int partition(int arr[], int low, int high) {Int partition(Int arr[], Int low, Int high) {int partition(int arr[], int low, int high) {int partition(int arr[], int low, int high) {
    // 选择最后一个元素作为基准值
    int pivot = arr[high];   Int pivot = arr[high]；Int pivot = arr[high]；Int pivot = arr[high]；
    // 初始化小于基准值的元素的边界
    int i = low - 1;Int I = low - 1；int i = low - 1；

    // 遍历数组，将小于基准值的元素交换到左边
    for (int j = low; j <= high - 1; j++) {For (int j = low；J <= high - 1；J) {For (int j = low；J <= high - 1；j) {For (int j = low; j <= high - 1; j) {
        if (arr[j] < pivot) {如果（arr[j] < pivot） {如果（arr[j] < pivot） {{(arr[j] < pivot) {
            i++;   我;
            swap(arr[i], arr[j]);   交换(arr[我],arr [j]);
        }
    }
    // 将基准值放到正确的位置
    swap(arr[i + 1], arr[high]);交换（arr[i 1], arr[high]）；交换(arr[我],arr[高]);交换(arr[我],arr(高));
    // 返回基准值的最终位置
    return i + 1;   返回I 1；返回I 1；1；
}

// 快速排序函数
// 参数 arr 为待排序的数组，low 为数组的起始索引，high 为数组的结束索引
void Quick_Sort(int arr[], int low, int high) {
    // 当起始索引小于结束索引时，说明数组还可以继续排序
    if (low < high) {If (low < high) {if (low < high) {if (low < high) {
        // 进行分区操作，得到基准值的最终位置
        int pi = partition(arr, low, high);Int PI = partition(arr, low, high)；int pi = partition(arr, low, high)；

        // 递归排序基准值左边的子数组
        Quick_Sort(arr, low, pi - 1);Quick_Sort(arr, low, pi - 1)；Quick_Sort(arr, low, pi - 1)；
        // 递归排序基准值右边的子数组
        Quick_Sort(arr, pi + 1, high);快速排序（arr, pi 1, high）；Quick_Sort(arr, pi 1, high)；
    }
}
时间复杂度
● 分解：每次将列表分成两半，需要 O(log n) 层递归。
● 合并：每层递归需要 O(n) 的时间来合并子列表。
● 总时间复杂度：O(n log n)。
在最差情况下，每轮哨兵划分操作都将长度为 n 的数组划分为长度为 0 和 n−1 的两个子数组，此时递归层数达到 n ，每层中的循环数为 n ，总体使用 O($n^2$) 时间。
空间复杂度
● O(n)，归并排序需要额外的空间来存储临时列表。
优缺点
● 优点：
  ○ 时间复杂度稳定为 O(n log n)，适合大规模数据。
  ○ 稳定排序算法（相同元素的相对顺序不会改变）。
  ○ 适合外部排序（如对磁盘文件进行排序）。
● 缺点：
  ○ 需要额外的存储空间，空间复杂度为 O(n)。
  ○ 对于小规模数据，性能可能不如插入排序等简单算法
基准数优化
● 快速排序在某些输入下的时间效率可能降低。举一个极端例子，假设输入数组是完全倒序的，由于我们选择最左端元素作为基准数，那么在哨兵划分完成后，
基准数被交换至数组最右端，导致左子数组长度为 n−1、右子数组长度为 0 。如此递归下去，每轮哨兵划分后都有一个子数组的长度为 0 ，分治策略失效，
快速排序退化为“冒泡排序”的近似形式。为了尽量避免这种情况发生，我们可以优化哨兵划分中的基准数的选取策略。例如，我们可以随机选取一个元素作为基准数。
然而，如果运气不佳，每次都选到不理想的基准数，效率仍然不尽如人意。需要注意的是，编程语言通常生成的是“伪随机数”。如果我们针对伪随机数序列构建
一个特定的测试样例，那么快速排序的效率仍然可能劣化。为了进一步改进，我们可以在数组中选取三个候选元素（通常为数组的首、尾、中点元素），并将这三个候选元素的中位数作为基准数。
这样一来，基准数“既不太小也不太大”的概率将大幅提升。当然，我们还可以选取更多候选元素，以进一步提高算法的稳健性。采用这种方法后，时间复杂度劣化至 O(n2) 的概率大大降低。
int medianThree(int nums[], int left, int mid, int right) {
    int l = nums[left], m = nums[mid], r = nums[right];
    if ((l <= m && m <= r) || (r <= m && m <= l))
        return mid; // m 在 l 和 r 之间
    if ((m <= l && l <= r) || (r <= l && l <= m))
        return left; // l 在 m 和 r 之间
    return right;
}

/* 哨兵划分（三数取中值） */
int partitionMedian(int nums[], int left, int right) {
    // 选取三个候选元素的中位数
    int med = medianThree(nums, left, (left + right) / 2, right);
    // 将中位数交换至数组最左端
    swap(nums, left, med);
    // 以 nums[left] 为基准数
    int i = left, j = right;
    while (i < j) {
        while (i < j && nums[j] >= nums[left])
            j--; // 从右向左找首个小于基准数的元素
        while (i < j && nums[i] <= nums[left])
            i++;          // 从左向右找首个大于基准数的元素
        swap(nums, i, j); // 交换这两个元素
    }
    swap(nums, i, left); // 将基准数交换至两子数组的分界线
    return i;            // 返回基准数的索引
}
